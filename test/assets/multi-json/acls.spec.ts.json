{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-01T03:33:45.039Z",
    "end": "2021-11-01T03:33:58.292Z",
    "duration": 13253
  },
  "tests": [
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Preparing environment to run the test and removing access for guest",
      "fullTitle": "Indexing - Validating ACLs update and indexation Preparing environment to run the test and removing access for guest",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGuestAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: grantRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\",\n                            permission: 'GRANT',\n                            users: 'u:guest',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode.addChild.addChild));\n                    expect(response.data.jcr.mutateNode.addChild.addChild.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: updateRoles,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                                permission: 'GRANT',\n                                users: 'g:users',\n                            },\n                        })];\n                case 3:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 4:\n                    _a.sent();\n                    return [4 /*yield*/, apollo_1.apollo().query({\n                            query: searchResults,\n                            variables: {\n                                q: 'digitall',\n                                workspace: 'LIVE',\n                                siteKeys: [Cypress.env('AS_SITEKEY')],\n                                language: 'en',\n                                searchIn: null,\n                                pageSize: 20,\n                                pageCount: 0,\n                                sortBy: null,\n                                filters: { nodeType: { type: 'jnt:page' } },\n                            },\n                        })];\n                case 5:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.search.results.hits));\n                    expect(response.data.search.results.hits.length).to.equal(8);\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: updateRoles,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                                permission: 'DENY',\n                                users: 'u:guest',\n                            },\n                        })];\n                case 6:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })\n                        // This function is used to check if the data has been updated and made its way to the AS index\n                        // Idea is to avoid using arbitrary sleep\n                    ];\n                case 7:\n                    _a.sent();\n                    checkGuestAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('guest'); });\n                                    return [2 /*return*/, aboutPages.length === 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGuestAcl)];\n                case 8:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 4419,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that guest lost access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that guest lost access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.equal(0);\n        });\n    }",
      "duration": 116,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that user jane still has access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that user jane still has access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            authMethod: {\n                username: 'jane',\n                password: 'password',\n            },\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.be.greaterThan(0);\n        });\n    }",
      "duration": 105,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Restore access to guest user to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Restore access to guest user to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGuestAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: updateRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                            permission: 'GRANT',\n                            users: 'u:guest',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    checkGuestAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('guest'); });\n                                    return [2 /*return*/, aboutPages.length > 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGuestAcl)];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 2340,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate guest user recovered access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate guest user recovered access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) { return __awaiter(void 0, void 0, void 0, function () {\n            var paths;\n            return __generator(this, function (_a) {\n                cy.log(JSON.stringify(response));\n                paths = response.data.search.results.hits.map(function (h) { return h.path; });\n                cy.log(JSON.stringify(paths));\n                // Check if any of the returned path contains the about node\n                expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.be.greaterThan(1);\n                return [2 /*return*/];\n            });\n        }); });\n    }",
      "duration": 64,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Preparing environment to run the test and removing access for group g:users",
      "fullTitle": "Indexing - Validating ACLs update and indexation Preparing environment to run the test and removing access for group g:users",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGroupsAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: updateRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                            permission: 'DENY',\n                            users: 'g:users',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    checkGroupsAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('groups'); });\n                                    return [2 /*return*/, aboutPages.length === 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGroupsAcl)];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 2300,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that user jane (member of g:users) lost access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that user jane (member of g:users) lost access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            authMethod: {\n                username: 'jane',\n                password: 'password',\n            },\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.equal(0);\n        });\n    }",
      "duration": 64,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Restore access to group g:users to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Restore access to group g:users to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGuestAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: updateRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                            permission: 'GRANT',\n                            users: 'g:users',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    checkGuestAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('groups'); });\n                                    return [2 /*return*/, aboutPages.length > 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGuestAcl)];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 3417,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that user jane (member of g:users) recovered access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that user jane (member of g:users) recovered access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            authMethod: {\n                username: 'jane',\n                password: 'password',\n            },\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.be.greaterThan(1);\n        });\n    }",
      "duration": 69,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [],
  "passes": [
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Preparing environment to run the test and removing access for guest",
      "fullTitle": "Indexing - Validating ACLs update and indexation Preparing environment to run the test and removing access for guest",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGuestAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: grantRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\",\n                            permission: 'GRANT',\n                            users: 'u:guest',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode.addChild.addChild));\n                    expect(response.data.jcr.mutateNode.addChild.addChild.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: updateRoles,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                                permission: 'GRANT',\n                                users: 'g:users',\n                            },\n                        })];\n                case 3:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 4:\n                    _a.sent();\n                    return [4 /*yield*/, apollo_1.apollo().query({\n                            query: searchResults,\n                            variables: {\n                                q: 'digitall',\n                                workspace: 'LIVE',\n                                siteKeys: [Cypress.env('AS_SITEKEY')],\n                                language: 'en',\n                                searchIn: null,\n                                pageSize: 20,\n                                pageCount: 0,\n                                sortBy: null,\n                                filters: { nodeType: { type: 'jnt:page' } },\n                            },\n                        })];\n                case 5:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.search.results.hits));\n                    expect(response.data.search.results.hits.length).to.equal(8);\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: updateRoles,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                                permission: 'DENY',\n                                users: 'u:guest',\n                            },\n                        })];\n                case 6:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })\n                        // This function is used to check if the data has been updated and made its way to the AS index\n                        // Idea is to avoid using arbitrary sleep\n                    ];\n                case 7:\n                    _a.sent();\n                    checkGuestAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('guest'); });\n                                    return [2 /*return*/, aboutPages.length === 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGuestAcl)];\n                case 8:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 4419,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that guest lost access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that guest lost access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.equal(0);\n        });\n    }",
      "duration": 116,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that user jane still has access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that user jane still has access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            authMethod: {\n                username: 'jane',\n                password: 'password',\n            },\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.be.greaterThan(0);\n        });\n    }",
      "duration": 105,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Restore access to guest user to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Restore access to guest user to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGuestAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: updateRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                            permission: 'GRANT',\n                            users: 'u:guest',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    checkGuestAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('guest'); });\n                                    return [2 /*return*/, aboutPages.length > 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGuestAcl)];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 2340,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate guest user recovered access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate guest user recovered access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) { return __awaiter(void 0, void 0, void 0, function () {\n            var paths;\n            return __generator(this, function (_a) {\n                cy.log(JSON.stringify(response));\n                paths = response.data.search.results.hits.map(function (h) { return h.path; });\n                cy.log(JSON.stringify(paths));\n                // Check if any of the returned path contains the about node\n                expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.be.greaterThan(1);\n                return [2 /*return*/];\n            });\n        }); });\n    }",
      "duration": 64,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Preparing environment to run the test and removing access for group g:users",
      "fullTitle": "Indexing - Validating ACLs update and indexation Preparing environment to run the test and removing access for group g:users",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGroupsAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: updateRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                            permission: 'DENY',\n                            users: 'g:users',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    checkGroupsAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('groups'); });\n                                    return [2 /*return*/, aboutPages.length === 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGroupsAcl)];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 2300,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that user jane (member of g:users) lost access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that user jane (member of g:users) lost access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            authMethod: {\n                username: 'jane',\n                password: 'password',\n            },\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.equal(0);\n        });\n    }",
      "duration": 64,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Restore access to group g:users to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Restore access to group g:users to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () { return __awaiter(void 0, void 0, void 0, function () {\n        var response, checkGuestAcl;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, apollo_1.apollo().mutate({\n                        mutation: updateRoles,\n                        variables: {\n                            pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl/GRANT_u_guest\",\n                            permission: 'GRANT',\n                            users: 'g:users',\n                        },\n                    })];\n                case 1:\n                    response = _a.sent();\n                    cy.log(JSON.stringify(response.data.jcr.mutateNode));\n                    expect(response.data.jcr.mutateNode.property1.setValue).to.be.true;\n                    return [4 /*yield*/, apollo_1.apollo().mutate({\n                            mutation: publishNode,\n                            variables: {\n                                pathOrId: \"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about/j:acl\",\n                            },\n                        })];\n                case 2:\n                    _a.sent();\n                    checkGuestAcl = function (apollo, graphQLQuery) { return __awaiter(void 0, void 0, void 0, function () {\n                        var response, aboutPages;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, apollo().query({\n                                        query: graphQLQuery,\n                                        variables: {\n                                            q: 'digitall',\n                                            workspace: 'LIVE',\n                                            siteKeys: [Cypress.env('AS_SITEKEY')],\n                                            language: 'en',\n                                            searchIn: null,\n                                            pageSize: 20,\n                                            pageCount: 0,\n                                            sortBy: null,\n                                            filters: { nodeType: { type: 'jnt:page' } },\n                                        },\n                                    })];\n                                case 1:\n                                    response = _a.sent();\n                                    console.log(response.data.search.results.hits.filter(function (h) {\n                                        return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\");\n                                    }));\n                                    aboutPages = response.data.search.results.hits\n                                        .filter(function (h) { return h.path.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); })\n                                        .filter(function (h) { return h.acl.includes('groups'); });\n                                    return [2 /*return*/, aboutPages.length > 0];\n                            }\n                        });\n                    }); };\n                    cy.log('Wait until data has been re-indexed');\n                    return [4 /*yield*/, checkDataUpdated_1.checkDataUpdated(apollo_1.apollo, searchResults, 30, checkGuestAcl)];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    }); }",
      "duration": 3417,
      "currentRetry": 0,
      "err": {}
    },
    {
      "suite": "Indexing - Validating ACLs update and indexation",
      "title": "Validate that user jane (member of g:users) recovered access to the /home/about/ nodes",
      "fullTitle": "Indexing - Validating ACLs update and indexation Validate that user jane (member of g:users) recovered access to the /home/about/ nodes",
      "file": "cypress/integration/index/acls.spec.ts",
      "body": "function () {\n        cy.task('apolloNode', {\n            baseUrl: Cypress.config().baseUrl,\n            query: searchResults,\n            authMethod: {\n                username: 'jane',\n                password: 'password',\n            },\n            variables: {\n                q: 'digitall',\n                workspace: 'LIVE',\n                siteKeys: [Cypress.env('AS_SITEKEY')],\n                language: 'en',\n                searchIn: null,\n                pageSize: 20,\n                pageCount: 0,\n                sortBy: null,\n                filters: { nodeType: { type: 'jnt:page' } },\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }).then(function (response) {\n            cy.log(JSON.stringify(response));\n            var paths = response.data.search.results.hits.map(function (h) { return h.path; });\n            cy.log(JSON.stringify(paths));\n            // Check if any of the returned path contains the about node\n            expect(paths.filter(function (p) { return p.includes(\"/sites/\" + Cypress.env('AS_SITEKEY') + \"/home/about\"); }).length).to.be.greaterThan(1);\n        });\n    }",
      "duration": 69,
      "currentRetry": 0,
      "err": {}
    }
  ]
}