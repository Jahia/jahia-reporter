{
  "stats": {
    "suites": 7,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2021-10-29T17:28:00.882Z",
    "end": "2021-10-29T17:28:36.052Z",
    "duration": 14082,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "526fa93c-1c0c-4bb4-9fe0-6b7be8c7f963",
      "title": "",
      "fullFile": "cypress/integration/api/admin/config.spec.ts",
      "file": "cypress/integration/api/admin/config.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "28725fba-de4d-43be-8169-292ef874d670",
          "title": "admin.configuration",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get flat properties from config",
              "fullTitle": "admin.configuration Get flat properties from config",
              "timedOut": null,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "readConfig({ configPid: 'org.jahia.test.config', flat: true }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.flatKeys).to.include.members(['object.listObjects[0].A']);\n    expect(response.data.admin.jahia.configuration.flatProperties\n        .filter(function (c) { return c.key === 'object.listObjects[0].A'; })\n        .map(function (c) { return c.value; })[0]).to.eq('A0');\n});",
              "err": {},
              "uuid": "a8e1d716-10a9-4a99-ae26-612c78a8051d",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get properties from structured navigation",
              "fullTitle": "admin.configuration Get properties from structured navigation",
              "timedOut": null,
              "duration": 93,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "readConfig({ configPid: 'org.jahia.test.config', value: 'value', object: 'object', objectValue: 'A' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.keys).to.include.members(['list', 'value', 'object']);\n    expect(response.data.admin.jahia.configuration.value).to.eq('test');\n    expect(response.data.admin.jahia.configuration.object.keys).to.contain('A');\n    expect(response.data.admin.jahia.configuration.object.value).to.eq('testA');\n});",
              "err": {},
              "uuid": "af56666c-aa8f-4e9c-8aa3-0aa027442e9c",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of values",
              "fullTitle": "admin.configuration Get list of values",
              "timedOut": null,
              "duration": 83,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "readConfig({ configPid: 'org.jahia.test.config', object: 'object', objectList: 'list' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.object.list.values).to.include.members([\n        'testObjectList0',\n        'testObjectList1',\n    ]);\n});",
              "err": {},
              "uuid": "26b03543-6d87-43cf-8d5d-9735bdcc009d",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get list of objects",
              "fullTitle": "admin.configuration Get list of objects",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "readConfig({\n    configPid: 'org.jahia.test.config',\n    object: 'object',\n    objectList: 'listObjects',\n    objectListValue: 'A',\n}).should(function (response) {\n    response.data.admin.jahia.configuration.object.list.objects.forEach(function (obj) {\n        expect(obj.keys).to.include.members(['A', 'B']);\n        expect(obj.value).to.be.oneOf(['A0', 'A1']);\n    });\n});",
              "err": {},
              "uuid": "0b2998f7-9b84-4413-a7b6-9237120fd97f",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Updates a property",
              "fullTitle": "admin.configuration Updates a property",
              "timedOut": null,
              "duration": 339,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    mutation: (0, graphql_tag_1.default)(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n                mutation {\\n                    admin {\\n                        jahia {\\n                            configuration(pid: \\\"org.jahia.test.config\\\") {\\n                                updated: value(name: \\\"value\\\", value: \\\"updatedValue\\\")\\n                                new: value(name: \\\"newValue\\\", value: \\\"newValue\\\")\\n                            }\\n                        }\\n                    }\\n                }\\n            \"], [\"\\n                mutation {\\n                    admin {\\n                        jahia {\\n                            configuration(pid: \\\"org.jahia.test.config\\\") {\\n                                updated: value(name: \\\"value\\\", value: \\\"updatedValue\\\")\\n                                new: value(name: \\\"newValue\\\", value: \\\"newValue\\\")\\n                            }\\n                        }\\n                    }\\n                }\\n            \"])))\n});\nreadConfig({ configPid: 'org.jahia.test.config', value: 'value' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.value).to.eq('updatedValue');\n});\nreadConfig({ configPid: 'org.jahia.test.config', value: 'newValue' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.value).to.eq('newValue');\n});",
              "err": {},
              "uuid": "198a9a6f-b83d-4353-8c58-07ee48d566be",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates a config",
              "fullTitle": "admin.configuration creates a config",
              "timedOut": null,
              "duration": 185,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "editConfig({ configPid: 'org.jahia.test.config.new', valueKey: 'value', value: 'test-new-prop' });\nreadConfig({ configPid: 'org.jahia.test.config.new', value: 'value' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.value).to.eq('test-new-prop');\n});",
              "err": {},
              "uuid": "0ed0226d-dd44-4f10-b7ac-a484f1aa943a",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates factory configs",
              "fullTitle": "admin.configuration creates factory configs",
              "timedOut": null,
              "duration": 393,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "editConfig({\n    configPid: 'org.jahia.test.config.new',\n    configIdentifier: 'conf1',\n    valueKey: 'value',\n    value: 'test-new-prop-1',\n});\neditConfig({\n    configPid: 'org.jahia.test.config.new',\n    configIdentifier: 'conf2',\n    valueKey: 'value',\n    value: 'test-new-prop-2',\n});\nreadConfig({ configPid: 'org.jahia.test.config.new', configIdentifier: 'conf1', value: 'value' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.value).to.eq('test-new-prop-1');\n});\nreadConfig({ configPid: 'org.jahia.test.config.new', configIdentifier: 'conf2', value: 'value' }).should(function (response) {\n    expect(response.data.admin.jahia.configuration.value).to.eq('test-new-prop-2');\n});",
              "err": {},
              "uuid": "a07acb9c-b649-4bff-9f3e-62d380889713",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates object value",
              "fullTitle": "admin.configuration creates object value",
              "timedOut": null,
              "duration": 233,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "editConfig({\n    configPid: 'org.jahia.test.config.new',\n    object: 'subObject',\n    objectValueKey: 'value',\n    objectValue: 'test-new-prop',\n});\nreadConfig({\n    configPid: 'org.jahia.test.config.new',\n    flat: true,\n    object: 'subObject',\n    objectValue: 'value',\n}).should(function (response) {\n    expect(response.data.admin.jahia.configuration.flatKeys).to.include('subObject.value');\n    expect(response.data.admin.jahia.configuration.object.value).to.eq('test-new-prop');\n});",
              "err": {},
              "uuid": "dfd8b153-07f3-4b24-9af5-b384a472f326",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates list values",
              "fullTitle": "admin.configuration creates list values",
              "timedOut": null,
              "duration": 320,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "editConfig({\n    configPid: 'org.jahia.test.config.new',\n    object: 'subObject',\n    objectList: 'list',\n    addListValue: 'val1',\n});\neditConfig({\n    configPid: 'org.jahia.test.config.new',\n    object: 'subObject',\n    objectList: 'list',\n    addListValue: 'val2',\n});\nreadConfig({\n    configPid: 'org.jahia.test.config.new',\n    flat: true,\n    object: 'subObject',\n    objectList: 'list',\n}).should(function (response) {\n    expect(response.data.admin.jahia.configuration.flatKeys).to.include.members([\n        'subObject.list[0]',\n        'subObject.list[1]',\n    ]);\n    expect(response.data.admin.jahia.configuration.object.list.values).to.include.members(['val1', 'val2']);\n});",
              "err": {},
              "uuid": "495c0122-a4a6-4cbf-8269-68e7e87be596",
              "parentUUID": "28725fba-de4d-43be-8169-292ef874d670",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8e1d716-10a9-4a99-ae26-612c78a8051d",
            "af56666c-aa8f-4e9c-8aa3-0aa027442e9c",
            "26b03543-6d87-43cf-8d5d-9735bdcc009d",
            "0b2998f7-9b84-4413-a7b6-9237120fd97f",
            "198a9a6f-b83d-4353-8c58-07ee48d566be",
            "0ed0226d-dd44-4f10-b7ac-a484f1aa943a",
            "a07acb9c-b649-4bff-9f3e-62d380889713",
            "dfd8b153-07f3-4b24-9af5-b384a472f326",
            "495c0122-a4a6-4cbf-8269-68e7e87be596"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1180eb9b-0912-4552-8d5e-0cf36762edbf",
      "title": "",
      "fullFile": "cypress/integration/api/admin/dateTime.spec.ts",
      "file": "cypress/integration/api/admin/dateTime.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5c272330-e42d-4314-a6c1-f38653999f0f",
          "title": "admin.datetime - Jahia Server time",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Jahia server current time (as root)",
              "fullTitle": "admin.datetime - Jahia Server time Get Jahia server current time (as root)",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({ queryFile: 'admin/datetime.graphql' }).should(function (response) {\n    cy.log(\"Date on the server is: \" + response.data.admin.datetime);\n    expect((0, date_fns_1.isValid)(new Date(response.data.admin.datetime))).to.be.true;\n});",
              "err": {},
              "uuid": "4fa0f300-b8da-46e1-aa63-00332090afd1",
              "parentUUID": "5c272330-e42d-4314-a6c1-f38653999f0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Jahia server current time (as guest)",
              "fullTitle": "admin.datetime - Jahia Server time Get Jahia server current time (as guest)",
              "timedOut": null,
              "duration": 127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apolloClient({ username: 'guest', password: 'I-DO-NOT-EXIST' }).apollo({ queryFile: 'admin/datetime.graphql', errorPolicy: 'all' }).should(function (response) {\n    expect(response.errors).to.be.not.empty;\n});",
              "err": {},
              "uuid": "b950b881-223c-425e-986c-c6b613d24575",
              "parentUUID": "5c272330-e42d-4314-a6c1-f38653999f0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4fa0f300-b8da-46e1-aa63-00332090afd1",
            "b950b881-223c-425e-986c-c6b613d24575"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 257,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "df838aba-bffc-4b47-a273-232e22593358",
      "title": "",
      "fullFile": "cypress/integration/api/admin/user.spec.ts",
      "file": "cypress/integration/api/admin/user.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
          "title": "Test admin user endpoint",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "gets a user",
              "fullTitle": "Test admin user endpoint gets a user",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/user.graphql',\n    variables: { username: 'irina', group: '' }\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user.name).to.equal('irina');\n    expect(response.data.admin.userAdmin.user.username).to.equal('irina');\n    expect(response.data.admin.userAdmin.user.firstname).to.equal('Irina');\n    expect(response.data.admin.userAdmin.user.lastname).to.equal('Pasteur');\n    expect(response.data.admin.userAdmin.user.organization).not.to.be.undefined;\n    expect(response.data.admin.userAdmin.user.language).to.equal('en');\n    expect(response.data.admin.userAdmin.user.locked).to.equal(false);\n    expect(response.data.admin.userAdmin.user.email).not.to.be.undefined;\n});",
              "err": {},
              "uuid": "d9672c6e-cfb4-4dc5-a93a-322305d9b1ff",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets a non existing user",
              "fullTitle": "Test admin user endpoint gets a non existing user",
              "timedOut": null,
              "duration": 74,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/user.graphql',\n    variables: { username: 'noob', group: '' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user).to.be.null;\n});",
              "err": {},
              "uuid": "fc0452bc-2b3b-4a11-aec7-b6f611adb711",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets a user name",
              "fullTitle": "Test admin user endpoint gets a user name",
              "timedOut": null,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/user.graphql',\n    variables: { username: 'bill', group: '' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user.username).to.equal('bill');\n    expect(response.data.admin.userAdmin.user.displayName).to.equal('Bill Galileo');\n});",
              "err": {},
              "uuid": "e490723f-9aea-4771-84b1-0d825e70a23e",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets a user name",
              "fullTitle": "Test admin user endpoint gets a user name",
              "timedOut": null,
              "duration": 248,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/user.graphql',\n    variables: { username: 'bill', group: 'site-administrators', site1: 'digitall', site2: 'systemsite' }\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user.yes).to.equal(true);\n    expect(response.data.admin.userAdmin.user.no).to.equal(false);\n});",
              "err": {},
              "uuid": "09b20795-ac93-44eb-bd6c-429bf9d5031d",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tests membership list",
              "fullTitle": "Test admin user endpoint tests membership list",
              "timedOut": null,
              "duration": 100,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/userGroupMembershipBasic.graphql',\n    variables: { username: 'bill', site: 'digitall' }\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user.groupMembership.pageInfo.totalCount).to.be.greaterThan(2);\n    expect(response.data.admin.userAdmin.user.groupMembership.nodes.map(function (n) { return n.name; })).to.contains('site-administrators');\n});",
              "err": {},
              "uuid": "a3392c1f-cf5b-45fa-9ce6-d1b3019f014c",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tests membership list for a site",
              "fullTitle": "Test admin user endpoint tests membership list for a site",
              "timedOut": null,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/userGroupMembershipBasic.graphql',\n    variables: { username: 'bill', site: 'digitall' }\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user.groupMembership.pageInfo.totalCount).to.equal(3);\n});",
              "err": {},
              "uuid": "6757b99b-e76c-4577-9072-f3d57d023ff9",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tests membership list with filter",
              "fullTitle": "Test admin user endpoint tests membership list with filter",
              "timedOut": null,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/userGroupMembershipFilter.graphql',\n    variables: { username: 'bill', field: 'site.name', value: 'digitall' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.user.groupMembership.pageInfo.totalCount).to.equal(3);\n});",
              "err": {},
              "uuid": "83954cdf-d626-4069-8205-6d668f75dcc9",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "tests members list",
              "fullTitle": "Test admin user endpoint tests members list",
              "timedOut": null,
              "duration": 76,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/group.graphql',\n    variables: { groupName: 'site-administrators', site: 'digitall' },\n}).should(function (response) {\n    expect(response.data.admin.userGroup).to.exist;\n    expect(response.data.admin.userGroup.group.members.nodes.map(function (n) { return n.name; })).to.contains('bill');\n});",
              "err": {},
              "uuid": "f2fbbd21-edf4-4902-ba9e-128cbfa25f7c",
              "parentUUID": "ff0c053d-7e49-4085-8e13-04ee2cb5f84c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9672c6e-cfb4-4dc5-a93a-322305d9b1ff",
            "fc0452bc-2b3b-4a11-aec7-b6f611adb711",
            "e490723f-9aea-4771-84b1-0d825e70a23e",
            "09b20795-ac93-44eb-bd6c-429bf9d5031d",
            "a3392c1f-cf5b-45fa-9ce6-d1b3019f014c",
            "6757b99b-e76c-4577-9072-f3d57d023ff9",
            "83954cdf-d626-4069-8205-6d668f75dcc9",
            "f2fbbd21-edf4-4902-ba9e-128cbfa25f7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 997,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "16a738f5-133d-4483-9e1a-ead29266e0d4",
      "title": "",
      "fullFile": "cypress/integration/api/admin/users.spec.ts",
      "file": "cypress/integration/api/admin/users.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
          "title": "Test admin users endpont",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "gets all users without any filtering",
              "fullTitle": "Test admin users endpont gets all users without any filtering",
              "timedOut": null,
              "duration": 2977,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/usersNoFilter.graphql'\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.users.pageInfo.nodesCount).to.equal(108);\n});",
              "err": {},
              "uuid": "3df68fce-0cc5-4fab-8619-9cfe0f8889e2",
              "parentUUID": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets users based on the name",
              "fullTitle": "Test admin users endpont gets users based on the name",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/users.graphql',\n    variables: { limit: 5, offset: 0, field: 'username', value: 'jay' }\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.users.pageInfo.nodesCount).to.equal(1);\n    expect(response.data.admin.userAdmin.users.nodes[0].username).to.equal('jay');\n    expect(response.data.admin.userAdmin.users.nodes[0].firstname).to.equal('Jay');\n    expect(response.data.admin.userAdmin.users.nodes[0].lastname).to.equal('Hawking');\n    expect(response.data.admin.userAdmin.users.nodes[0].organization).to.exist;\n    expect(response.data.admin.userAdmin.users.nodes[0].locked).to.exist;\n});",
              "err": {},
              "uuid": "daa14005-2063-4f0d-89e5-b763655b8b3c",
              "parentUUID": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets users based on the site and limit them",
              "fullTitle": "Test admin users endpont gets users based on the site and limit them",
              "timedOut": null,
              "duration": 158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/users.graphql',\n    variables: { limit: 20, offset: 0, field: 'site.name', value: 'systemsite' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.users.pageInfo.nodesCount).to.equal(20);\n});",
              "err": {},
              "uuid": "741234fb-4df7-4933-8311-7049745c96a7",
              "parentUUID": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets users based on the organization and limit them",
              "fullTitle": "Test admin users endpont gets users based on the organization and limit them",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/users.graphql',\n    variables: { limit: 15, offset: 0, field: 'organization', value: 'Product Development' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.users.pageInfo.nodesCount).to.equal(13);\n});",
              "err": {},
              "uuid": "9a284c1e-1743-4979-a983-a60056965464",
              "parentUUID": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets users based on the site and offset them",
              "fullTitle": "Test admin users endpont gets users based on the site and offset them",
              "timedOut": null,
              "duration": 237,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/users.graphql',\n    variables: { limit: 10, offset: 100, field: 'site.name', value: 'systemsite' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.users.pageInfo.nodesCount).to.equal(8);\n});",
              "err": {},
              "uuid": "2e547bf1-5e3a-497e-a66b-8c14f1401bff",
              "parentUUID": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "gets users based on the site with huge limit and no offset",
              "fullTitle": "Test admin users endpont gets users based on the site with huge limit and no offset",
              "timedOut": null,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'admin/users.graphql',\n    variables: { limit: 1000, offset: 0, field: 'site.name', value: 'systemsite' },\n}).should(function (response) {\n    expect(response.data.admin.userAdmin).to.exist;\n    expect(response.data.admin.userAdmin.users.pageInfo.nodesCount).to.equal(108);\n});",
              "err": {},
              "uuid": "87e20ad3-053e-4fb0-881b-96ac3278cdac",
              "parentUUID": "6d3d8076-e1df-4205-ad63-9391f08ffac2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3df68fce-0cc5-4fab-8619-9cfe0f8889e2",
            "daa14005-2063-4f0d-89e5-b763655b8b3c",
            "741234fb-4df7-4933-8311-7049745c96a7",
            "9a284c1e-1743-4979-a983-a60056965464",
            "2e547bf1-5e3a-497e-a66b-8c14f1401bff",
            "87e20ad3-053e-4fb0-881b-96ac3278cdac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3944,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "977d46a7-d2af-422b-8145-a406dc86496c",
      "title": "",
      "fullFile": "cypress/integration/api/apiDescription.spec.ts",
      "file": "cypress/integration/api/apiDescription.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e6f5c909-ef20-4223-a826-1e570cbd4166",
          "title": "Test if every type in graphQL API has description",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check every input for the User Type",
              "fullTitle": "Test if every type in graphQL API has description Check every input for the User Type",
              "timedOut": null,
              "duration": 5960,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var types = new Set();\nvar noDesc = new Set();\nvar invalidNames = new Set();\ncy.apolloClient().then(function (client) { return executeTest(client, 'Query', types, noDesc, invalidNames); }).should(function () {\n    var noDescBlacklist = [\n        'type=JCRSite/field=findAvailableNodeName/arg=nodeType',\n        'type=JCRSite/field=findAvailableNodeName/arg=language',\n        'type=VanityUrl/field=findAvailableNodeName/arg=nodeType',\n        'type=VanityUrl/field=findAvailableNodeName/arg=language',\n        'type=GqlDashboard',\n        'type=GqlModule',\n        'type=GqlEditorForms',\n        'type=EditorForm',\n        'type=EditorFormSection',\n        'type=EditorFormFieldSet',\n        'type=EditorFormField',\n        'type=EditorFormFieldValue',\n        'type=EditorFormProperty',\n        'type=EditorFormFieldValueConstraint',\n        'type=InputContextEntryInput',\n        'inputType=InputContextEntryInput/field=key',\n        'inputType=InputContextEntryInput/field=value',\n        'type=Query/field=categoryById/arg=id',\n        'type=Metadata/field=uuid',\n        'type=Metadata/field=path',\n        'type=Category/field=uuid',\n        'type=Category/field=path',\n        'type=Query/field=categoryByPath/arg=path',\n    ];\n    noDescBlacklist.forEach(function (n) { return noDesc.delete(n); });\n    var invalidNameBlacklist = ['wipInfo'];\n    invalidNameBlacklist.forEach(function (n) { return invalidNames.delete(n); });\n    expect(JSON.stringify(Array.from(noDesc))).to.equals('[]');\n    expect(JSON.stringify(Array.from(invalidNames))).to.equals('[]');\n});",
              "err": {},
              "uuid": "f27814a3-8d8f-4577-85ff-bcf75937b775",
              "parentUUID": "e6f5c909-ef20-4223-a826-1e570cbd4166",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f27814a3-8d8f-4577-85ff-bcf75937b775"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5960,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d7467665-0292-4823-9d3b-61ae0619f43b",
      "title": "",
      "fullFile": "cypress/integration/api/currentUser.spec.ts",
      "file": "cypress/integration/api/currentUser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e39b553c-fa97-4dcc-b585-4c2523b83173",
          "title": "Validate ability get current User",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Current user for Authenticated user (irina)",
              "fullTitle": "Validate ability get current User Get Current user for Authenticated user (irina)",
              "timedOut": null,
              "duration": 150,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apolloClient({ username: 'irina', password: 'password' }).apollo({ queryFile: 'currentUser.graphql' }).should(function (response) {\n    expect(response.data.currentUser.name).to.equal('irina');\n    expect(response.data.currentUser.username).to.equal('irina');\n    expect(response.data.currentUser.firstname).to.equal('Irina');\n    expect(response.data.currentUser.lastname).to.equal('Pasteur');\n    expect(response.data.currentUser.organization).to.equal('Acme Space');\n    expect(response.data.currentUser.language).to.equal('en');\n    expect(response.data.currentUser.locked).to.equal(false);\n    expect(response.data.currentUser.email).to.be.empty;\n});",
              "err": {},
              "uuid": "77a647ec-c02c-4cb0-8d7c-7f0151d1790a",
              "parentUUID": "e39b553c-fa97-4dcc-b585-4c2523b83173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Current user for Authenticated user (root)",
              "fullTitle": "Validate ability get current User Get Current user for Authenticated user (root)",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({ queryFile: 'currentUser.graphql' }).should(function (response) {\n    expect(response.data.currentUser.name).to.equal('root');\n});",
              "err": {},
              "uuid": "39982593-95d6-47cd-869b-1ee73b7136ce",
              "parentUUID": "e39b553c-fa97-4dcc-b585-4c2523b83173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Current user for Authenticated user (root) with an incorrect password",
              "fullTitle": "Validate ability get current User Get Current user for Authenticated user (root) with an incorrect password",
              "timedOut": null,
              "duration": 68,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apolloClient({ username: 'root', password: 'THIS-IS-INCORRECT' }).apollo({ queryFile: 'currentUser.graphql', errorPolicy: 'all' }).should(function (response) {\n    expect(response.data.currentUser).to.be.null;\n});",
              "err": {},
              "uuid": "70b5190b-78c3-4b0e-bc3d-25af7d06234b",
              "parentUUID": "e39b553c-fa97-4dcc-b585-4c2523b83173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Current user for Authenticated user (root) with an incorrect user",
              "fullTitle": "Validate ability get current User Get Current user for Authenticated user (root) with an incorrect user",
              "timedOut": null,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apolloClient({ username: 'I-DO-NOT-EXIST', password: 'THIS-IS-INCORRECT' }).apollo({ queryFile: 'currentUser.graphql', errorPolicy: 'all' }).should(function (response) {\n    expect(response.data.currentUser).to.be.null;\n});",
              "err": {},
              "uuid": "f34636cf-f098-4432-a8eb-2926db654b1e",
              "parentUUID": "e39b553c-fa97-4dcc-b585-4c2523b83173",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "77a647ec-c02c-4cb0-8d7c-7f0151d1790a",
            "39982593-95d6-47cd-869b-1ee73b7136ce",
            "70b5190b-78c3-4b0e-bc3d-25af7d06234b",
            "f34636cf-f098-4432-a8eb-2926db654b1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 331,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a9b1c04a-d72c-45ba-9428-269e772fcc57",
      "title": "",
      "fullFile": "cypress/integration/api/jcr/checkNodePropertyType.spec.ts",
      "file": "cypress/integration/api/jcr/checkNodePropertyType.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4139bd4f-a8cf-47a9-8cdc-42e6c11be8fd",
          "title": "Test page properties",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get a page by path and verify isHomePage has a boolean value",
              "fullTitle": "Test page properties Get a page by path and verify isHomePage has a boolean value",
              "timedOut": null,
              "duration": 483,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apollo({\n    queryFile: 'jcr/pageByPath.graphql',\n    variables: { path: '/sites/systemsite/home/testPage' }\n}).should(function (response) {\n    expect(response.data.jcr.nodeByPath).to.exist;\n    expect(response.data.jcr.nodeByPath.name).to.equal('testPage');\n    expect(response.data.jcr.nodeByPath.isHomePage.booleanValue).to.equal(false);\n});",
              "err": {},
              "uuid": "f9476d1f-45c6-4888-9823-3d71754ed394",
              "parentUUID": "4139bd4f-a8cf-47a9-8cdc-42e6c11be8fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9476d1f-45c6-4888-9823-3d71754ed394"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 483,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "cypress",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "./results/reports/",
        "reportFilename": "cypress",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}