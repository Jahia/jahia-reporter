{
  "stats": {
    "suites": 7,
    "tests": 16,
    "passes": 15,
    "pending": 0,
    "failures": 1,
    "start": "2021-10-29T13:18:13.161Z",
    "end": "2021-10-29T13:20:27.283Z",
    "duration": 92908,
    "testsRegistered": 16,
    "passPercent": 93.75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cea68e5b-fc46-4103-b4f1-1aadf2c7831f",
      "title": "",
      "fullFile": "cypress/integration/api/changeJcustomerPassword.spec.ts",
      "file": "cypress/integration/api/changeJcustomerPassword.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5249bdf9-0291-45da-b00e-42bc985c28e8",
          "title": "Validate password change",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Change password to passABC123",
              "fullTitle": "Validate password change Change password to passABC123",
              "timedOut": null,
              "duration": 13139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(\"Starting test : This test will be changing the password to: \" + karafPassword);\n// Check initialy jCustomer is online\ncy.log(\"Nothing was changed, jcustomer should be online using default user (\" + Cypress.env('JCUSTOMER_USERNAME') + \" : \" + Cypress.env('JCUSTOMER_PASSWORD') + \")\");\nsettings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Online');\n// check non existing user/password returns error 401\ncy.log('Since the new password has not been set, using it should return 401');\ncheckJCustomerAccessibleFromAPI(karafUsername, karafPassword, 401);\n// API call to create a new karaf user\ncy.log(\"Use Karaf SSH API to create the new user (\" + karafUsername + \" : \" + karafPassword + \")\");\ncreateKarafAdmin(karafUsername, karafPassword);\n// check new user/password allow to access jcustomer api\ncy.log(\"Verifies the new user (\" + karafUsername + \" : \" + karafPassword + \") can be used with the API\");\ncheckJCustomerAccessibleFromAPI(karafUsername, karafPassword, 200);\n// Edit jExperience configuration in Jahia set the new user but keep old password\ncy.log(\"Update jExperience configuration to use the new user (\" + karafUsername + \") but keep the old password\");\nupdateJExperienceConfUsernamePassword(karafUsername);\nwaitForJExperienceConfUsernamePasswordUpdated(karafUsername, Cypress.env('JCUSTOMER_PASSWORD'));\n// Check jExperience is offline\ncy.log('jCustomer connection should error out since the password has not been updated');\nsettings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Error');\n// Edit jExperience configuration in Jahia set the new password\ncy.log(\"Update jExperience configuration to use the new password (\" + karafPassword + \")\");\nupdateJExperienceConfUsernamePassword(undefined, karafPassword);\nwaitForJExperienceConfUsernamePasswordUpdated(karafUsername, karafPassword);\ncy.log('The connection is using new credentials, it should report Online');\nsettings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Online');",
              "err": {},
              "uuid": "5be0357d-be4f-4290-b911-875141a781e8",
              "parentUUID": "5249bdf9-0291-45da-b00e-42bc985c28e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Change password to pass!()+*-#$@_`.:=/^?~w",
              "fullTitle": "Validate password change Change password to pass!()+*-#$@_`.:=/^?~w",
              "timedOut": null,
              "duration": 3871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(\"Starting test : This test will be changing the password to: \" + karafPassword);\n// Check initialy jCustomer is online\ncy.log(\"Nothing was changed, jcustomer should be online using default user (\" + Cypress.env('JCUSTOMER_USERNAME') + \" : \" + Cypress.env('JCUSTOMER_PASSWORD') + \")\");\nsettings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Online');\n// check non existing user/password returns error 401\ncy.log('Since the new password has not been set, using it should return 401');\ncheckJCustomerAccessibleFromAPI(karafUsername, karafPassword, 401);\n// API call to create a new karaf user\ncy.log(\"Use Karaf SSH API to create the new user (\" + karafUsername + \" : \" + karafPassword + \")\");\ncreateKarafAdmin(karafUsername, karafPassword);\n// check new user/password allow to access jcustomer api\ncy.log(\"Verifies the new user (\" + karafUsername + \" : \" + karafPassword + \") can be used with the API\");\ncheckJCustomerAccessibleFromAPI(karafUsername, karafPassword, 200);\n// Edit jExperience configuration in Jahia set the new user but keep old password\ncy.log(\"Update jExperience configuration to use the new user (\" + karafUsername + \") but keep the old password\");\nupdateJExperienceConfUsernamePassword(karafUsername);\nwaitForJExperienceConfUsernamePasswordUpdated(karafUsername, Cypress.env('JCUSTOMER_PASSWORD'));\n// Check jExperience is offline\ncy.log('jCustomer connection should error out since the password has not been updated');\nsettings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Error');\n// Edit jExperience configuration in Jahia set the new password\ncy.log(\"Update jExperience configuration to use the new password (\" + karafPassword + \")\");\nupdateJExperienceConfUsernamePassword(undefined, karafPassword);\nwaitForJExperienceConfUsernamePasswordUpdated(karafUsername, karafPassword);\ncy.log('The connection is using new credentials, it should report Online');\nsettings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Online');",
              "err": {},
              "uuid": "e51da4da-f818-4a20-9694-920b73f9ce28",
              "parentUUID": "5249bdf9-0291-45da-b00e-42bc985c28e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5be0357d-be4f-4290-b911-875141a781e8",
            "e51da4da-f818-4a20-9694-920b73f9ce28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17010,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ca35b41d-195b-4aa3-af92-95be2daad835",
      "title": "",
      "fullFile": "cypress/integration/api/currentUser.spec.ts",
      "file": "cypress/integration/api/currentUser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "413c20b7-cb30-4e6a-9950-561d9fcfb663",
          "title": "DEMO - Validate ability get current User",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get Current user for known user (mathias) - Recommended method",
              "fullTitle": "DEMO - Validate ability get current User Get Current user for known user (mathias) - Recommended method",
              "timedOut": null,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Get Current user for known user (mathias) - Recommended method');\ncy.apolloQuery((0, apollo_1.apollo)(Cypress.config().baseUrl, { username: 'mathias', password: 'password' }), {\n    query: GQL_APIUSER,\n}).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.data.currentUser.name).to.equal('mathias');\n});",
              "err": {},
              "uuid": "4145af26-2755-4e9a-9784-e6a5ffb88f59",
              "parentUUID": "413c20b7-cb30-4e6a-9950-561d9fcfb663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Current user for known user (root) - Recommended method",
              "fullTitle": "DEMO - Validate ability get current User Get Current user for known user (root) - Recommended method",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Get Current user for known user (root) - Recommended method');\ncy.apolloQuery((0, apollo_1.apollo)(Cypress.config().baseUrl, { username: 'root', password: Cypress.env('SUPER_USER_PASSWORD') }), {\n    query: GQL_APIUSER,\n}).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.data.currentUser.name).to.equal('root');\n});",
              "err": {},
              "uuid": "7e3be8b4-e0b8-4772-bf20-99a9a7ceb887",
              "parentUUID": "413c20b7-cb30-4e6a-9950-561d9fcfb663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Current user for known user (root) with incorrect password - Recommended method",
              "fullTitle": "DEMO - Validate ability get current User Get Current user for known user (root) with incorrect password - Recommended method",
              "timedOut": null,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Get Current user for known user (root) with incorrect password - Recommended method');\ncy.apolloQuery((0, apollo_1.apollo)(Cypress.config().baseUrl, { username: 'root', password: 'THIS-IS-AN-INCORRECT-PASSWORD' }), {\n    query: GQL_APIUSER,\n}).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.data.currentUser).to.equal(null);\n    expect(response.errors[0].message).to.equal('Permission denied');\n});",
              "err": {},
              "uuid": "d8277bc1-ed41-41a7-8070-a1f6f83dd5d7",
              "parentUUID": "413c20b7-cb30-4e6a-9950-561d9fcfb663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Current user for unknown user - Recommended method",
              "fullTitle": "DEMO - Validate ability get current User Get Current user for unknown user - Recommended method",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Get Current user for unknown user - Recommended method');\ncy.apolloQuery((0, apollo_1.apollo)(Cypress.config().baseUrl, { username: 'I-DO-NOT-EXIST', password: 'THIS-IS-AN-INCORRECT-PASSWORD' }), {\n    query: GQL_APIUSER,\n}).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.data.currentUser).to.equal(null);\n    expect(response.errors[0].message).to.equal('Permission denied');\n});",
              "err": {},
              "uuid": "bb008b88-2f65-456b-87fe-7ead45116056",
              "parentUUID": "413c20b7-cb30-4e6a-9950-561d9fcfb663",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Guest user cannot use the API with default configuration - Recommended method",
              "fullTitle": "DEMO - Validate ability get current User Guest user cannot use the API with default configuration - Recommended method",
              "timedOut": null,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Guest user cannot use the API with default configuration - Recommended method');\ncy.apolloQuery((0, apollo_1.apollo)(Cypress.config().baseUrl, {}), {\n    query: GQL_APIUSER,\n}).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.data.currentUser).to.equal(null);\n    expect(response.errors[0].message).to.equal('Permission denied');\n});",
              "err": {},
              "uuid": "89108117-88a0-40c6-b356-d7ec33efe76d",
              "parentUUID": "413c20b7-cb30-4e6a-9950-561d9fcfb663",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4145af26-2755-4e9a-9784-e6a5ffb88f59",
            "7e3be8b4-e0b8-4772-bf20-99a9a7ceb887",
            "d8277bc1-ed41-41a7-8070-a1f6f83dd5d7",
            "bb008b88-2f65-456b-87fe-7ead45116056",
            "89108117-88a0-40c6-b356-d7ec33efe76d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 421,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "416f4d99-2c7f-41fd-a49d-eb801db53b21",
      "title": "",
      "fullFile": "cypress/integration/api/healthcheck.spec.ts",
      "file": "cypress/integration/api/healthcheck.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ac153e77-bf4e-4c9f-bfa7-d37632841f15",
          "title": "Validate jExperience Healthcheck module",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verifies the probe does not show up when filtered on high severity",
              "fullTitle": "Validate jExperience Healthcheck module Verifies the probe does not show up when filtered on high severity",
              "timedOut": null,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest('GET', '/modules/healthcheck?severity=high', null, authorization).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.probes['JExperience_org.jahia.modules.jexperience.settings-global.cfg']).to.be.undefined;\n});",
              "err": {},
              "uuid": "9fd13d33-9f66-46d5-bfe3-fe86e3413131",
              "parentUUID": "ac153e77-bf4e-4c9f-bfa7-d37632841f15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifies the probe does not show up when filtered on default severity",
              "fullTitle": "Validate jExperience Healthcheck module Verifies the probe does not show up when filtered on default severity",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest('GET', '/modules/healthcheck', null, authorization).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.probes['JExperience_org.jahia.modules.jexperience.settings-global.cfg']).to.be.undefined;\n});",
              "err": {},
              "uuid": "26ee0563-e71b-450b-b7f3-5ce3b6913f85",
              "parentUUID": "ac153e77-bf4e-4c9f-bfa7-d37632841f15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifies the probe shows up when filtered on low severity",
              "fullTitle": "Validate jExperience Healthcheck module Verifies the probe shows up when filtered on low severity",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest('GET', '/modules/healthcheck?severity=low', null, authorization).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.probes['JExperience_org.jahia.modules.jexperience.settings-global.cfg']).not.to.be.undefined;\n    var jexpProbe = response.probes['JExperience_org.jahia.modules.jexperience.settings-global.cfg'];\n    expect(jexpProbe.severity).to.equal('LOW');\n    expect(jexpProbe.status).to.equal('GREEN');\n});",
              "err": {},
              "uuid": "55b6d811-0cc5-4498-aa90-60b2a96e7596",
              "parentUUID": "ac153e77-bf4e-4c9f-bfa7-d37632841f15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifies jCustomer is online",
              "fullTitle": "Validate jExperience Healthcheck module Verifies jCustomer is online",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest('GET', '/modules/healthcheck?severity=low', null, authorization).should(function (response) {\n    cy.log(JSON.stringify(response));\n    expect(response.probes['JExperience_org.jahia.modules.jexperience.settings-global.cfg']).not.to.be.undefined;\n    var jexpProbe = response.probes['JExperience_org.jahia.modules.jexperience.settings-global.cfg'];\n    expect(jexpProbe.data.connectionInfo.status).to.equal('ONLINE');\n});",
              "err": {},
              "uuid": "1b648ef0-b1fc-4c58-9077-86821e60078c",
              "parentUUID": "ac153e77-bf4e-4c9f-bfa7-d37632841f15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9fd13d33-9f66-46d5-bfe3-fe86e3413131",
            "26ee0563-e71b-450b-b7f3-5ce3b6913f85",
            "55b6d811-0cc5-4498-aa90-60b2a96e7596",
            "1b648ef0-b1fc-4c58-9077-86821e60078c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 220,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1aa92359-98b7-472d-a1f3-f0b1a0927217",
      "title": "",
      "fullFile": "cypress/integration/basic.spec.ts",
      "file": "cypress/integration/basic.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b8318eb6-8835-4c3d-b298-48e9c7b153a4",
          "title": "jexperience",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validate jcustomer is configured",
              "fullTitle": "jexperience validate jcustomer is configured",
              "timedOut": null,
              "duration": 911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "settings_connection_jcustomer_page_1.settingsConnectionJcustomer.goTo().verifyJcustomerStatus('Online');",
              "err": {},
              "uuid": "96dc04c5-9867-4473-910c-d1a00a93b805",
              "parentUUID": "b8318eb6-8835-4c3d-b298-48e9c7b153a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96dc04c5-9867-4473-910c-d1a00a93b805"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 911,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7ddb8090-81f2-415c-90d9-83dc658f106e",
      "title": "",
      "fullFile": "cypress/integration/ui/basicpersonalizationTest.spec.ts",
      "file": "cypress/integration/ui/basicpersonalizationTest.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cde69d6f-0103-401a-ab52-c6e7189adfa7",
          "title": "basic personalization test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "validate basic personalization SSR",
              "fullTitle": "basic personalization test validate basic personalization SSR",
              "timedOut": null,
              "duration": 10591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSite_test_page_1.testSitePage.goTo(testPagePath).verifySimpleTextDisplayed('botDetection-SSR-variant1');\ntestSite_test_page_1.testSitePage.goTo(testPagePath).verifySimpleTextNotExist('botDetection-SSR-fallback');",
              "err": {},
              "uuid": "b07ebd2a-55d3-4bf5-855e-a9c886b0548b",
              "parentUUID": "cde69d6f-0103-401a-ab52-c6e7189adfa7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "validate basic personalization JSR",
              "fullTitle": "basic personalization test validate basic personalization JSR",
              "timedOut": null,
              "duration": 645,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testSite_test_page_1.testSitePage.goTo(testPagePath).verifySimpleTextDisplayed('botDetection-JSR-variant1');\ntestSite_test_page_1.testSitePage.goTo(testPagePath).verifySimpleTextNotDisplayed('botDetection-JSR-fallback');",
              "err": {},
              "uuid": "7682fdbc-ddd9-466d-9cc0-e6ec9398e307",
              "parentUUID": "cde69d6f-0103-401a-ab52-c6e7189adfa7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b07ebd2a-55d3-4bf5-855e-a9c886b0548b",
            "7682fdbc-ddd9-466d-9cc0-e6ec9398e307"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1d2fbfb2-54fa-4df0-8db2-f39377b5dbe7",
      "title": "",
      "fullFile": "cypress/integration/ui/profileCsvExport.spec.ts",
      "file": "cypress/integration/ui/profileCsvExport.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "227caf46-5059-4225-ae44-0704f03798df",
          "title": "profile export in csv",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "export a set of profiles in csv",
              "fullTitle": "profile export in csv export a set of profiles in csv",
              "timedOut": null,
              "duration": 8521,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.login();\nvar profileExportListPage = profiles_export_list_page_1.ProfileExportListPage.visit();\nvar profileExportCreatePage = profileExportListPage.startNewProfileExport();\nprofileExportCreatePage.setName('test-CSV-profile-exports');\nprofileExportCreatePage.setSegment(segmentid);\nprofileExportCreatePage.setMapping(['email', 'firstName', 'lastName', 'age', 'firstVisit', 'lastVisit']);\nprofileExportCreatePage.saveAndExport();\n// Validate export\nvar downloadFolder = 'downloads/';\nvar lastDownloadedFile = '';\ncy.log('init lastDownloadedFile =' + lastDownloadedFile);\n// Wait for export file to be downloaded\ncy.waitUntil(function () {\n    return cy.task('listFiles', { downloadFolder: downloadFolder }).then(function (list) {\n        for (var _i = 0, _a = list; _i < _a.length; _i++) {\n            var fileName = _a[_i];\n            if (fileName.startsWith('Profiles_export')) {\n                return true;\n            }\n        }\n        return false;\n    });\n});\ncy.task('listFiles', { downloadFolder: downloadFolder }).then(function (list) {\n    // Find the latest \"profile_export\" file downloaded. File format is : 'Profiles_export_2021-10-27-13-26.csv'\n    for (var _i = 0, _a = list; _i < _a.length; _i++) {\n        var fileName = _a[_i];\n        if (fileName.startsWith('Profiles_export') && fileName > lastDownloadedFile) {\n            lastDownloadedFile = fileName;\n        }\n    }\n    // Validate latest profile_export file contains the expected data\n    cy.readFile(downloadFolder + lastDownloadedFile).then(function (file) {\n        expect(file).to.contain('Martin,Ravel,38');\n        expect(file).to.contain('CsvExportTest,CsvExportTest,30');\n        expect(file).not.to.contain('Claudia,Haydn,27');\n        expect(file).not.to.contain('Antoine,Vivaldi,41');\n    });\n});",
              "err": {
                "message": "CypressError: `cy.task('listFiles')` failed with the following error:\n\n> ENOENT: no such file or directory, scandir 'downloads/'\n\nhttps://on.cypress.io/api/task",
                "estack": "CypressError: `cy.task('listFiles')` failed with the following error:\n\n> ENOENT: no such file or directory, scandir 'downloads/'\n\nhttps://on.cypress.io/api/task\n    at http://jahia:8080/__cypress/runner/cypress_runner.js:158898:78\n    at tryCatcher (http://jahia:8080/__cypress/runner/cypress_runner.js:13212:23)\n    at Promise._settlePromiseFromHandler (http://jahia:8080/__cypress/runner/cypress_runner.js:11147:31)\n    at Promise._settlePromise (http://jahia:8080/__cypress/runner/cypress_runner.js:11204:18)\n    at Promise._settlePromise0 (http://jahia:8080/__cypress/runner/cypress_runner.js:11249:10)\n    at Promise._settlePromises (http://jahia:8080/__cypress/runner/cypress_runner.js:11325:18)\n    at _drainQueueStep (http://jahia:8080/__cypress/runner/cypress_runner.js:7919:12)\n    at _drainQueue (http://jahia:8080/__cypress/runner/cypress_runner.js:7912:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://jahia:8080/__cypress/runner/cypress_runner.js:7928:5)\n    at Async.drainQueues (http://jahia:8080/__cypress/runner/cypress_runner.js:7798:14)\nFrom Your Spec Code:\n    at eval (http://jahia:8080/__cypress/tests?p=cypress/integration/ui/profileCsvExport.spec.ts:1327:23)\n    at resolveValue (http://jahia:8080/__cypress/tests?p=cypress/integration/ui/profileCsvExport.spec.ts:770:20)\n    at Context.waitUntil (http://jahia:8080/__cypress/tests?p=cypress/integration/ui/profileCsvExport.spec.ts:780:10)\n\nFrom Node.js Internals:\n  Error: ENOENT: no such file or directory, scandir 'downloads/'\n      at Object.readdirSync (fs.js:1021:3)\n      at Object.e.readdirSync (electron/js2c/asar_bundle.js:5:10478)\n      at listFiles (/home/jahians/cypress/plugins/index.js:42:23)\n      at invoke (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/child/task.js:47:14)\n      at /home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/util.js:45:14\n      at tryCatcher (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/util.js:16:23)\n      at Function.Promise.attempt.Promise.try (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/node_modules/bluebird/js/release/method.js:39:29)\n      at Object.wrapChildPromise (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/util.js:44:23)\n      at Object.wrap (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/child/task.js:53:8)\n      at execute (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/child/run_plugins.js:127:19)\n      at EventEmitter.<anonymous> (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/child/run_plugins.js:202:5)\n      at EventEmitter.emit (events.js:315:20)\n      at process.<anonymous> (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/lib/plugins/util.js:19:22)\n      at process.emit (events.js:315:20)\n      at process.emit (/home/jahians/.cache/Cypress/8.5.0/Cypress/resources/app/packages/server/node_modules/source-map-support/source-map-support.js:495:21)\n      at emit (internal/child_process.js:903:12)\n      at processTicksAndRejections (internal/process/task_queues.js:81:21)",
                "diff": null
              },
              "uuid": "53df2791-161e-4add-8837-e016321d4fd7",
              "parentUUID": "227caf46-5059-4225-ae44-0704f03798df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "53df2791-161e-4add-8837-e016321d4fd7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8521,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e10d4cfc-1d36-4e86-ad81-ac6ebd1f65e1",
      "title": "",
      "fullFile": "cypress/integration/ui/profileCsvImport.spec.ts",
      "file": "cypress/integration/ui/profileCsvImport.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f5357076-aae4-4b60-bb9a-8066da21ca7f",
          "title": "profile import from csv",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "import a set of profiles from csv",
              "fullTitle": "profile import from csv import a set of profiles from csv",
              "timedOut": null,
              "duration": 54589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.login();\nvar profileImportListPage = profiles_import_list_page_1.ProfileImportListPage.visit();\nvar profileImportCreatePage = profileImportListPage.startNewProfileImport();\n// Configure the import\nprofileImportCreatePage.setName('test-CSV-profile-imports');\nvar filePath = 'testData/profile_import.csv';\nprofileImportCreatePage.selectFile(filePath);\nprofileImportCreatePage.setMergingProperty('email');\nprofileImportCreatePage.setMapping([\n    'email',\n    'firstName',\n    'lastName',\n    'age',\n    'city',\n    'company',\n    'firstVisit',\n    'lastVisit',\n]);\n// Perform the import\nprofileImportCreatePage.saveAndImport();\nprofileImportListPage.waitForPageDisplayed(120000);\n(0, profileListHelpers_1.waitForProfile)('CsvImportCompleted', 120000);\n// Get list of profiles, check they are imported\ncy.request(profileListHelpers_1.requestProfileList).then(function (resp) {\n    var founduser1 = false;\n    var founduser2 = false;\n    var founduser3 = false;\n    for (var i = 0; i < resp.body.list.length; i++) {\n        if (resp.body.list[i].properties.lastName == 'Pasteur' &&\n            resp.body.list[i].properties.firstName == 'Annie') {\n            founduser1 = true;\n            expect(resp.body.list[i].properties.age).to.equal(37);\n            expect(resp.body.list[i].properties.city).to.equal('');\n            expect(resp.body.list[i].properties.company).to.equal('Acme Space');\n            expect(resp.body.list[i].properties.firstVisit).to.equal('2021-06-08T09:49:20Z');\n            expect(resp.body.list[i].properties.lastVisit).to.equal('2021-10-07T09:49:20Z');\n        }\n        if (resp.body.list[i].properties.lastName == 'Hawking' &&\n            resp.body.list[i].properties.firstName == 'Irina') {\n            founduser2 = true;\n            expect(resp.body.list[i].properties.age).to.equal(58);\n            expect(resp.body.list[i].properties.city).to.equal('Paris');\n            expect(resp.body.list[i].properties.company).to.equal('');\n            expect(resp.body.list[i].properties.firstVisit).to.equal('2021-07-11T09:49:20Z');\n            expect(resp.body.list[i].properties.lastVisit).to.equal('2021-08-17T09:49:20Z');\n        }\n        if (resp.body.list[i].properties.lastName == 'Curie' &&\n            resp.body.list[i].properties.firstName == 'Stephane') {\n            founduser3 = true;\n            expect(resp.body.list[i].properties.age).to.equal(31);\n            expect(resp.body.list[i].properties.city).to.equal('Toronto');\n            expect(resp.body.list[i].properties.company).to.equal('Jahia');\n            expect(resp.body.list[i].properties.firstVisit).to.equal('2019-10-07T09:49:20Z');\n            expect(resp.body.list[i].properties.lastVisit).to.equal('2021-10-03T09:49:20Z');\n        }\n    }\n    expect(founduser1).to.equal(true);\n    expect(founduser2).to.equal(true);\n    expect(founduser3).to.equal(true);\n});",
              "err": {},
              "uuid": "227dc99c-184f-448e-97fe-8f47f6b36d06",
              "parentUUID": "f5357076-aae4-4b60-bb9a-8066da21ca7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "227dc99c-184f-448e-97fe-8f47f6b36d06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54589,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "cypress",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "./results/reports/",
        "reportFilename": "cypress",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}